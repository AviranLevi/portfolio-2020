{"ast":null,"code":"var _jsxFileName = \"/home/aviranlevi/Documents/Projects/portfolio-2020/src/context/GlobalState.js\";\nimport React, { createContext, useReducer } from 'react';\nimport validator from 'validator';\nimport AppReducer from './AppReducer';\nimport projects from '../constant/projects';\nimport profile from '../constant/profile';\nimport * as actionType from './types';\nimport * as api from '../api';\nconst initialState = {\n  profile,\n  projects,\n  features: {\n    openProfileCard: false,\n    openProjectsCard: false,\n    sendMessage: false,\n    openMessagePopup: false,\n    thanksToast: false,\n    isLoading: false,\n    noTechToDisplay: true\n  },\n  errors: {\n    messageError: false,\n    nameError: false,\n    emailError: false,\n    textError: false,\n    errorToast: false\n  }\n};\nexport const GlobalContext = createContext(initialState);\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, setState] = useReducer(AppReducer, initialState);\n\n  const toggleProfileCard = bool => setState({\n    type: actionType.TOGGLE_PROFILE,\n    payload: bool\n  });\n\n  const toggleProjectsCard = bool => setState({\n    type: actionType.TOGGLE_PROJECTS,\n    payload: bool\n  });\n\n  const toggleMessageToast = bool => setState({\n    type: actionType.TOGGLE_MESSAGE_TOAST,\n    payload: bool\n  });\n\n  const displayProjectTech = (projectIndex, displayTech = false) => {\n    setState({\n      type: actionType.DISPLAY_TECH,\n      payload: {\n        projectIndex,\n        displayTech\n      }\n    });\n\n    if (displayTech) {\n      setState({\n        type: actionType.NO_TECH_TO_DISPLAY,\n        payload: false\n      });\n    } else {\n      setState({\n        type: actionType.NO_TECH_TO_DISPLAY,\n        payload: true\n      });\n    }\n  };\n\n  const sendMessage = async ({\n    name = '',\n    email = '',\n    text = ''\n  }) => {\n    const nameIsValid = name.length > 0;\n    const emailIsValid = validator.isEmail(email);\n    const textIsValid = text.length > 0;\n\n    if (nameIsValid) {\n      setState({\n        type: actionType.FORM_NAME_ERROR,\n        payload: false\n      });\n    } else {\n      setState({\n        type: actionType.FORM_NAME_ERROR,\n        payload: true\n      });\n    }\n\n    if (emailIsValid) {\n      setState({\n        type: actionType.FORM_EMAIL_ERROR,\n        payload: false\n      });\n    } else {\n      setState({\n        type: actionType.FORM_EMAIL_ERROR,\n        payload: true\n      });\n    }\n\n    if (textIsValid) {\n      setState({\n        type: actionType.FORM_TEXT_ERROR,\n        payload: false\n      });\n    } else {\n      setState({\n        type: actionType.FORM_TEXT_ERROR,\n        payload: true\n      });\n    }\n\n    if (nameIsValid && emailIsValid && textIsValid) {\n      isLoading(true);\n      toggleMessageToast(false);\n      const {\n        success\n      } = await api.sendEmail({\n        name,\n        email,\n        text\n      });\n\n      if (success) {\n        isLoading(false);\n        toggleThanksToast(true);\n      } else {\n        isLoading(false);\n        toggleErrorToast(true);\n      }\n    }\n  };\n\n  const toggleThanksToast = bool => {\n    setState({\n      type: actionType.THANKS_TOAST,\n      payload: bool\n    });\n\n    if (bool) {\n      setTimeout(() => setState({\n        type: actionType.THANKS_TOAST,\n        payload: false\n      }), 3000);\n    }\n  };\n\n  const toggleErrorToast = bool => {\n    setState({\n      type: actionType.ERROR_TOAST,\n      payload: bool\n    });\n\n    if (bool) {\n      setTimeout(() => setState({\n        type: actionType.ERROR_TOAST,\n        payload: false\n      }), 3000);\n    }\n  };\n\n  const isLoading = bool => setState({\n    type: actionType.IS_LOADING,\n    payload: bool\n  });\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      state,\n      toggleProfileCard,\n      toggleProjectsCard,\n      toggleMessageToast,\n      displayProjectTech,\n      toggleThanksToast,\n      isLoading,\n      sendMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aviranlevi/Documents/Projects/portfolio-2020/src/context/GlobalState.js"],"names":["React","createContext","useReducer","validator","AppReducer","projects","profile","actionType","api","initialState","features","openProfileCard","openProjectsCard","sendMessage","openMessagePopup","thanksToast","isLoading","noTechToDisplay","errors","messageError","nameError","emailError","textError","errorToast","GlobalContext","GlobalProvider","children","state","setState","toggleProfileCard","bool","type","TOGGLE_PROFILE","payload","toggleProjectsCard","TOGGLE_PROJECTS","toggleMessageToast","TOGGLE_MESSAGE_TOAST","displayProjectTech","projectIndex","displayTech","DISPLAY_TECH","NO_TECH_TO_DISPLAY","name","email","text","nameIsValid","length","emailIsValid","isEmail","textIsValid","FORM_NAME_ERROR","FORM_EMAIL_ERROR","FORM_TEXT_ERROR","success","sendEmail","toggleThanksToast","toggleErrorToast","THANKS_TOAST","setTimeout","ERROR_TOAST","IS_LOADING"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from 'react'\nimport validator from 'validator'\nimport AppReducer from './AppReducer'\nimport projects from '../constant/projects'\nimport profile from '../constant/profile'\nimport * as actionType from './types'\nimport * as api from '../api'\n\nconst initialState = {\n  profile,\n  projects,\n  features: {\n    openProfileCard: false,\n    openProjectsCard: false,\n    sendMessage: false,\n    openMessagePopup: false,\n    thanksToast: false,\n    isLoading: false,\n    noTechToDisplay: true,\n  },\n\n  errors: {\n    messageError: false,\n    nameError: false,\n    emailError: false,\n    textError: false,\n    errorToast: false,\n  },\n}\n\nexport const GlobalContext = createContext(initialState)\n\nexport const GlobalProvider = ({ children }) => {\n  const [state, setState] = useReducer(AppReducer, initialState)\n\n  const toggleProfileCard = (bool) => setState({ type: actionType.TOGGLE_PROFILE, payload: bool })\n\n  const toggleProjectsCard = (bool) => setState({ type: actionType.TOGGLE_PROJECTS, payload: bool })\n\n  const toggleMessageToast = (bool) => setState({ type: actionType.TOGGLE_MESSAGE_TOAST, payload: bool })\n\n  const displayProjectTech = (projectIndex, displayTech = false) => {\n    setState({ type: actionType.DISPLAY_TECH, payload: { projectIndex, displayTech } })\n\n    if (displayTech) {\n      setState({ type: actionType.NO_TECH_TO_DISPLAY, payload: false })\n    } else {\n      setState({ type: actionType.NO_TECH_TO_DISPLAY, payload: true })\n    }\n  }\n\n  const sendMessage = async ({ name = '', email = '', text = '' }) => {\n    const nameIsValid = name.length > 0\n    const emailIsValid = validator.isEmail(email)\n    const textIsValid = text.length > 0\n\n    if (nameIsValid) {\n      setState({ type: actionType.FORM_NAME_ERROR, payload: false })\n    } else {\n      setState({ type: actionType.FORM_NAME_ERROR, payload: true })\n    }\n\n    if (emailIsValid) {\n      setState({ type: actionType.FORM_EMAIL_ERROR, payload: false })\n    } else {\n      setState({ type: actionType.FORM_EMAIL_ERROR, payload: true })\n    }\n\n    if (textIsValid) {\n      setState({ type: actionType.FORM_TEXT_ERROR, payload: false })\n    } else {\n      setState({ type: actionType.FORM_TEXT_ERROR, payload: true })\n    }\n\n    if (nameIsValid && emailIsValid && textIsValid) {\n      isLoading(true)\n      toggleMessageToast(false)\n      const { success } = await api.sendEmail({ name, email, text })\n      if (success) {\n        isLoading(false)\n        toggleThanksToast(true)\n      } else {\n        isLoading(false)\n        toggleErrorToast(true)\n      }\n    }\n  }\n\n  const toggleThanksToast = (bool) => {\n    setState({ type: actionType.THANKS_TOAST, payload: bool })\n    if (bool) {\n      setTimeout(() => setState({ type: actionType.THANKS_TOAST, payload: false }), 3000)\n    }\n  }\n\n  const toggleErrorToast = (bool) => {\n    setState({ type: actionType.ERROR_TOAST, payload: bool })\n    if (bool) {\n      setTimeout(() => setState({ type: actionType.ERROR_TOAST, payload: false }), 3000)\n    }\n  }\n\n  const isLoading = (bool) => setState({ type: actionType.IS_LOADING, payload: bool })\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        state,\n        toggleProfileCard,\n        toggleProjectsCard,\n        toggleMessageToast,\n        displayProjectTech,\n        toggleThanksToast,\n        isLoading,\n        sendMessage,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}